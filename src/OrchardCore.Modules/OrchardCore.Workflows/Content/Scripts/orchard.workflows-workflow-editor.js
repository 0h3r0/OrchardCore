/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

///<reference path="../Lib/jquery/typings.d.ts" />
///<reference path="../Lib/jsplumb/typings.d.ts" />
///<reference path="./workflow-models.ts" />
var WorkflowEditor = /** @class */ (function () {
    function WorkflowEditor(container, workflowDefinitionData) {
        jsPlumb.ready(function () {
            var plumber = jsPlumb.getInstance({
                DragOptions: { cursor: 'pointer', zIndex: 2000 },
                ConnectionOverlays: [
                    ["Arrow", {
                            location: 1,
                            visible: true,
                            width: 11,
                            length: 11
                        }],
                    ["Label", {
                            location: 0.5,
                            id: "label",
                            cssClass: "connection-label"
                        }]
                ],
                Container: container
            });
            var getSourceEndpointOptions = function (overlayLabel) {
                // The definition of source endpoints.
                return {
                    endpoint: "Dot",
                    anchor: "Continuous",
                    paintStyle: {
                        stroke: "#7AB02C",
                        fill: "#7AB02C",
                        radius: 7,
                        strokeWidth: 1
                    },
                    isSource: true,
                    connector: ["Flowchart", { stub: [40, 60], gap: 0, cornerRadius: 5, alwaysRespectStubs: true }],
                    connectorStyle: {
                        strokeWidth: 2,
                        stroke: "#999999",
                        joinstyle: "round",
                        outlineStroke: "white",
                        outlineWidth: 2
                    },
                    hoverPaintStyle: {
                        fill: "#216477",
                        stroke: "#216477"
                    },
                    connectorHoverStyle: {
                        strokeWidth: 3,
                        stroke: "#216477",
                        outlineWidth: 5,
                        outlineStroke: "white"
                    },
                    dragOptions: {},
                    overlays: [
                        ["Label", {
                                location: [0.5, 1.5],
                                label: overlayLabel,
                                cssClass: "endpointSourceLabel",
                                visible: overlayLabel != null
                            }]
                    ]
                };
            };
            var init = function (connection) {
                connection.getOverlay("label").setLabel(connection.sourceId.substring(15) + "-" + connection.targetId.substring(15));
            };
            // Suspend drawing and initialize.
            plumber.batch(function () {
                // Listen for new connections; initialise them the same way we initialise the connections at startup.
                plumber.bind("connection", function (connInfo, originalEvent) {
                    init(connInfo.connection);
                });
                // Initialize activities, endpoints and connectors from model.
                var test = workflowDefinitionData;
                var workflowModel = {
                    activities: [{
                            id: 1,
                            left: 50,
                            top: 50,
                            outcomes: [{
                                    name: "Done",
                                    displayName: "Gereed"
                                }]
                        }, {
                            id: 2,
                            left: 500,
                            top: 150,
                            outcomes: [{
                                    name: "True",
                                    displayName: "True"
                                }, {
                                    name: "False",
                                    displayName: "False"
                                }]
                        }, {
                            id: 3,
                            left: 50,
                            top: 250,
                            outcomes: [{
                                    name: "Done",
                                    displayName: "Done"
                                }]
                        }, {
                            id: 4,
                            left: 350,
                            top: 250,
                            outcomes: [{
                                    name: "Done",
                                    displayName: "Done"
                                }]
                        }
                    ],
                    connections: [{
                            outcomeName: "Done",
                            sourceId: 1,
                            targetId: 2
                        }, {
                            outcomeName: "True",
                            sourceId: 2,
                            targetId: 3
                        }, {
                            outcomeName: "False",
                            sourceId: 2,
                            targetId: 4
                        }
                    ]
                };
                for (var _i = 0, _a = workflowModel.activities; _i < _a.length; _i++) {
                    var activityModel = _a[_i];
                    // Generate activity HTML element.
                    var activityNode = $("<div class=\"activity\" style=\"left:" + activityModel.left + "px; top:" + activityModel.top + "px;\"></div>");
                    var activityElement = activityNode[0];
                    // Add activity HTML element to the canvas.
                    $(container).append(activityNode);
                    // Make the activity draggable.
                    plumber.draggable(activityElement, { grid: [20, 20] });
                    // Configure the activity as a target.
                    plumber.makeTarget(activityElement, {
                        dropOptions: { hoverClass: "hover" },
                        anchor: "Continuous",
                        endpoint: ["Blank", { radius: 8 }]
                    });
                    // Add source endpoints.
                    var hasMultipleOutcomes = activityModel.outcomes.length > 1;
                    for (var _b = 0, _c = activityModel.outcomes; _b < _c.length; _b++) {
                        var outcome = _c[_b];
                        var sourceEndpointOptions = getSourceEndpointOptions(hasMultipleOutcomes ? outcome.displayName : null);
                        plumber.addEndpoint(activityElement, sourceEndpointOptions);
                    }
                }
                plumber.bind("click", function (conn, originalEvent) {
                    plumber.deleteConnection(conn);
                });
                plumber.bind("connectionDrag", function (connection) {
                    console.log("connection " + connection.id + " is being dragged. suspendedElement is ", connection.suspendedElement, " of type ", connection.suspendedElementType);
                });
                plumber.bind("connectionDragStop", function (connection) {
                    console.log("connection " + connection.id + " was dragged");
                });
                plumber.bind("connectionMoved", function (params) {
                    console.log("connection " + params.connection.id + " was moved");
                });
            });
            this.jsPlumbInstance = plumber;
        });
    }
    return WorkflowEditor;
}());
$.fn.workflowEditor = function () {
    this.each(function (index, element) {
        var $element = $(element);
        var workflowDefinitionData = $element.data("workflow-definition");
        debugger;
        $element.data("workflowEditor", new WorkflowEditor(element, workflowDefinitionData));
    });
    return this;
};
$(document).ready(function () {
    $('.workflow-editor-canvas').workflowEditor();
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
