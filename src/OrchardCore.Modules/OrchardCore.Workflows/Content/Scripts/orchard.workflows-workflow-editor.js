/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

///<reference path='../Lib/jquery/typings.d.ts' />
///<reference path='../Lib/jsplumb/typings.d.ts' />
///<reference path='./workflow-models.ts' />
// TODO: Re-implement this using an MVVM approach.
var WorkflowEditor = /** @class */ (function () {
    function WorkflowEditor(container, workflowDefinition, deleteActivityPrompt, localId, loadLocalState) {
        var _this = this;
        this.container = container;
        this.workflowDefinition = workflowDefinition;
        this.deleteActivityPrompt = deleteActivityPrompt;
        this.localId = localId;
        this.getActivity = function (id, activities) {
            if (activities === void 0) { activities = null; }
            if (!activities) {
                activities = this.workflowDefinition.activities;
            }
            return $.grep(activities, function (x) { return x.id === id; })[0];
        };
        this.getState = function () {
            var $allActivityElements = $(this.container).find('.activity');
            var workflow = {
                id: this.workflowDefinition.id,
                activities: [],
                transitions: []
            };
            // Collect activities.
            for (var i = 0; i < $allActivityElements.length; i++) {
                var $activityElement = $($allActivityElements[i]);
                var activityId = $activityElement.data('activity-id');
                var activityIsStart = $activityElement.data('activity-start');
                var activityPosition = $activityElement.position();
                var activity = this.getActivity(activityId);
                workflow.activities.push({
                    id: activityId,
                    isStart: activityIsStart,
                    outcomes: activity.outcomes,
                    x: activityPosition.left,
                    y: activityPosition.top
                });
            }
            // Collect connections.
            var allConnections = this.jsPlumbInstance.getConnections();
            for (var i = 0; i < allConnections.length; i++) {
                var connection = allConnections[i];
                var sourceEndpoint = connection.endpoints[0];
                var sourceOutcomeName = sourceEndpoint.getParameters().outcome.name;
                var sourceActivityId = $(connection.source).data('activity-id');
                var destinationActivityId = $(connection.target).data('activity-id');
                workflow.transitions.push({
                    sourceActivityId: sourceActivityId,
                    destinationActivityId: destinationActivityId,
                    sourceOutcomeName: sourceOutcomeName
                });
            }
            return workflow;
        };
        this.serialize = function () {
            var workflow = this.getState();
            return JSON.stringify(workflow);
        };
        this.saveLocalState = function () {
            var workflow = this.getState();
            sessionStorage[this.localId] = this.serialize(workflow);
        };
        this.loadLocalState = function () {
            return JSON.parse(sessionStorage[this.localId]);
        };
        var self = this;
        jsPlumb.ready(function () {
            jsPlumb.importDefaults({
                Anchor: "Continuous",
                // default drag options
                DragOptions: { cursor: 'pointer', zIndex: 2000 },
                // default to blue at one end and green at the other
                EndpointStyles: [{ fillStyle: '#225588' }],
                // blue endpoints 7 px; Blank endpoints.
                Endpoints: [["Dot", { radius: 7 }], ["Blank"]],
                // the overlays to decorate each connection with.  note that the label overlay uses a function to generate the label text; in this
                // case it returns the 'labelText' member that we set on each connection in the 'init' method below.
                ConnectionOverlays: [
                    ["Arrow", { width: 12, length: 12, location: -5 }],
                ],
                ConnectorZIndex: 5
            });
            var plumber = jsPlumb.getInstance({
                DragOptions: { cursor: 'pointer', zIndex: 2000 },
                ConnectionOverlays: [
                    ['Arrow', {
                            location: 1,
                            visible: true,
                            width: 11,
                            length: 11
                        }],
                    ['Label', {
                            location: 0.5,
                            id: 'label',
                            cssClass: 'connection-label'
                        }]
                ],
                Container: container
            });
            var getSourceEndpointOptions = function (activity, outcome) {
                // The definition of source endpoints.
                return {
                    endpoint: 'Dot',
                    anchor: 'Continuous',
                    paintStyle: {
                        stroke: '#7AB02C',
                        fill: '#7AB02C',
                        radius: 7,
                        strokeWidth: 1
                    },
                    isSource: true,
                    connector: ['Flowchart', { stub: [40, 60], gap: 0, cornerRadius: 5, alwaysRespectStubs: true }],
                    connectorStyle: {
                        strokeWidth: 2,
                        stroke: '#999999',
                        joinstyle: 'round',
                        outlineStroke: 'white',
                        outlineWidth: 2
                    },
                    hoverPaintStyle: {
                        fill: '#216477',
                        stroke: '#216477'
                    },
                    connectorHoverStyle: {
                        strokeWidth: 3,
                        stroke: '#216477',
                        outlineWidth: 5,
                        outlineStroke: 'white'
                    },
                    connectorOverlays: [['Label', { location: [3, -1.5], cssClass: 'endpointSourceLabel' }]],
                    dragOptions: {},
                    uuid: activity.id + "-" + outcome.name,
                    parameters: {
                        outcome: outcome
                    }
                };
            };
            // Listen for new connections.
            plumber.bind('connection', function (connInfo, originalEvent) {
                var connection = connInfo.connection;
                var outcome = connection.getParameters().outcome;
                var label = connection.getOverlay('label');
                label.setLabel(outcome.displayName);
            });
            var activityElements = $(container).find('.activity');
            // Suspend drawing and initialize.
            plumber.batch(function () {
                var serverWorkflowDefinition = _this.workflowDefinition;
                var workflowId = _this.workflowDefinition.id;
                if (loadLocalState) {
                    var localState = _this.loadLocalState();
                    if (localState) {
                        _this.workflowDefinition = localState;
                    }
                }
                activityElements.each(function (index, activityElement) {
                    var $activityElement = $(activityElement);
                    var activityId = $activityElement.data('activity-id');
                    var activity = _this.getActivity(activityId);
                    // Update the activity's visual state.
                    if (loadLocalState) {
                        debugger;
                        if (activity == null) {
                            // This is a newly added activity not yet added to local state.
                            activity = _this.getActivity(activityId, serverWorkflowDefinition.activities);
                            _this.workflowDefinition.activities.push(activity);
                            activity.x = 50;
                            activity.y = 50;
                        }
                        $activityElement
                            .css({ left: activity.x, top: activity.y })
                            .toggleClass('activity-start', activity.isStart)
                            .data('activity-start', activity.isStart);
                    }
                    // Make the activity draggable.
                    plumber.draggable(activityElement, { grid: [10, 10], });
                    // Configure the activity as a target.
                    plumber.makeTarget(activityElement, {
                        dropOptions: { hoverClass: 'hover' },
                        anchor: 'Continuous',
                        endpoint: ['Blank', { radius: 8 }]
                    });
                    // Add source endpoints.
                    for (var _i = 0, _a = activity.outcomes; _i < _a.length; _i++) {
                        var outcome = _a[_i];
                        var sourceEndpointOptions = getSourceEndpointOptions(activity, outcome);
                        plumber.addEndpoint(activityElement, { connectorOverlays: [['Label', { label: outcome.displayName, cssClass: 'connection-label' }]] }, sourceEndpointOptions);
                    }
                });
                // Connect activities.
                for (var _i = 0, _a = _this.workflowDefinition.transitions; _i < _a.length; _i++) {
                    var transitionModel = _a[_i];
                    var sourceEndpointUuid = transitionModel.sourceActivityId + "-" + transitionModel.sourceOutcomeName;
                    var sourceEndpoint = plumber.getEndpoint(sourceEndpointUuid);
                    var destinationElementId = "activity-" + workflowId + "-" + transitionModel.destinationActivityId;
                    plumber.connect({
                        source: sourceEndpoint,
                        target: destinationElementId
                    });
                }
                plumber.bind('contextmenu', function (component, originalEvent) {
                });
                plumber.bind('connectionDrag', function (connection) {
                    console.log('connection ' + connection.id + ' is being dragged. suspendedElement is ', connection.suspendedElement, ' of type ', connection.suspendedElementType);
                });
                plumber.bind('connectionDragStop', function (connection) {
                    console.log('connection ' + connection.id + ' was dragged');
                });
                plumber.bind('connectionMoved', function (params) {
                    console.log('connection ' + params.connection.id + ' was moved');
                });
            });
            // Initialize popovers.
            activityElements.popover({
                trigger: 'manual',
                html: true,
                content: function () {
                    var activityElement = $(this);
                    var $content = activityElement.find('.activity-commands').clone().show();
                    var startButton = $content.find('.activity-start-action');
                    var isStart = activityElement.data('activity-start') === true;
                    startButton.attr('aria-pressed', activityElement.data('activity-start'));
                    startButton.toggleClass('active', isStart);
                    $content.on('click', '.activity-start-action', function (e) {
                        e.preventDefault();
                        var button = $(e.currentTarget);
                        button.button('toggle');
                        var isStart = button.is('.active');
                        activityElement.data('activity-start', isStart);
                        activityElement.toggleClass('activity-start', isStart);
                    });
                    $content.on('click', '.activity-delete-action', function (e) {
                        e.preventDefault();
                        if (!confirm(self.deleteActivityPrompt)) {
                            return;
                        }
                        plumber.remove(activityElement);
                        activityElement.popover('dispose');
                    });
                    $content.on('click', '[data-persist-workflow]', function (e) {
                        self.saveLocalState();
                    });
                    return $content.get(0);
                }
            });
            $(container).on('click', '.activity', function (e) {
                if (_this.isDragging) {
                    return;
                }
                // if any other popovers are visible, hide them
                if (_this.isPopoverVisible) {
                    activityElements.popover('hide');
                }
                var sender = $(e.currentTarget);
                sender.popover('show');
                // handle clicking on the popover itself.
                $('.popover').off('click').on('click', function (e2) {
                    e2.stopPropagation();
                });
                e.stopPropagation();
                _this.isPopoverVisible = true;
            });
            $(container).on('dblclick', '.activity', function (e) {
                var sender = $(e.currentTarget);
                _this.saveLocalState();
                sender.find('.activity-edit-action').get(0).click();
            });
            // Hide all popovers when clicking anywhere but on an activity.
            $('body').on('click', function (e) {
                activityElements.popover('hide');
                _this.isPopoverVisible = false;
            });
            // Save local changes if the event target has the 'data-persist-workflow' attribute.
            $('body').on('click', '[data-persist-workflow]', function (e) {
                _this.saveLocalState();
            });
            _this.jsPlumbInstance = plumber;
        });
    }
    return WorkflowEditor;
}());
$.fn.workflowEditor = function () {
    this.each(function (index, element) {
        var $element = $(element);
        var workflowDefinition = $element.data('workflow-definition');
        var deleteActivityPrompt = $element.data('workflow-delete-activity-prompt');
        var localId = $element.data('workflow-local-id');
        var loadLocalState = $element.data('workflow-load-local-state');
        $element.data('workflowEditor', new WorkflowEditor(element, workflowDefinition, deleteActivityPrompt, localId, loadLocalState));
    });
    return this;
};
$(document).ready(function () {
    var workflowEditor = $('.workflow-editor-canvas').workflowEditor().data('workflowEditor');
    $('#workflowEditorForm').on('submit', function (s, e) {
        var state = workflowEditor.serialize();
        $('#workflowStateInput').val(state);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
