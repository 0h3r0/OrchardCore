/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

///<reference path="../Lib/jquery/typings.d.ts" />
///<reference path="../Lib/jsplumb/typings.d.ts" />
///<reference path="./workflow-models.ts" />
var WorkflowEditor = /** @class */ (function () {
    function WorkflowEditor(container, workflowDefinitionData) {
        var _this = this;
        this.container = container;
        this.serialize = function () {
            var allActivities = $(this.container).find(".activity");
            var workflow = {
                activities: [],
                connections: []
            };
            for (var i = 0; i < allActivities.length; i++) {
                var activity = $(allActivities[i]);
                var activityModel = activity.data("activity-model");
                var activityPosition = activity.position();
                workflow.activities.push({
                    id: activityModel.id,
                    x: activityPosition.left,
                    y: activityPosition.top
                });
            }
            var allConnections = this.jsPlumbInstance.getConnections();
            for (var i = 0; i < allConnections.length; i++) {
                var connection = allConnections[i];
                var sourceEndpoint = connection.endpoints[0];
                var sourceOutcomeName = sourceEndpoint.getParameters().outcome.name;
                var sourceActivity = $(connection.source).data("activity-model");
                var destinationActivity = $(connection.target).data("activity-model");
                workflow.connections.push({
                    sourceActivityId: sourceActivity.id,
                    destinationActivityId: destinationActivity.id,
                    sourceOutcomeName: sourceOutcomeName
                });
            }
            return JSON.stringify(workflow);
        };
        jsPlumb.ready(function () {
            var plumber = jsPlumb.getInstance({
                DragOptions: { cursor: 'pointer', zIndex: 2000 },
                ConnectionOverlays: [
                    ["Arrow", {
                            location: 1,
                            visible: true,
                            width: 11,
                            length: 11
                        }],
                    ["Label", {
                            location: 0.5,
                            id: "label",
                            cssClass: "connection-label"
                        }]
                ],
                Container: container
            });
            var getSourceEndpointOptions = function (outcome) {
                // The definition of source endpoints.
                return {
                    endpoint: "Dot",
                    anchor: "Continuous",
                    paintStyle: {
                        stroke: "#7AB02C",
                        fill: "#7AB02C",
                        radius: 7,
                        strokeWidth: 1
                    },
                    isSource: true,
                    connector: ["Flowchart", { stub: [40, 60], gap: 0, cornerRadius: 5, alwaysRespectStubs: true }],
                    connectorStyle: {
                        strokeWidth: 2,
                        stroke: "#999999",
                        joinstyle: "round",
                        outlineStroke: "white",
                        outlineWidth: 2
                    },
                    hoverPaintStyle: {
                        fill: "#216477",
                        stroke: "#216477"
                    },
                    connectorHoverStyle: {
                        strokeWidth: 3,
                        stroke: "#216477",
                        outlineWidth: 5,
                        outlineStroke: "white"
                    },
                    dragOptions: {},
                    overlays: [
                        ["Label", {
                                location: [0.5, 1.5],
                                //label: outcome.displayName,
                                cssClass: "endpointSourceLabel",
                                visible: true
                            }]
                    ],
                    parameters: {
                        outcome: outcome
                    }
                };
            };
            // Suspend drawing and initialize.
            plumber.batch(function () {
                // Listen for new connections; initialise them the same way we initialise the connections at startup.
                plumber.bind("connection", function (connInfo, originalEvent) {
                    var connection = connInfo.connection;
                    var outcome = connection.getParameters().outcome;
                    var label = connection.getOverlay("label");
                    label.setLabel(outcome.displayName);
                });
                // Initialize activities, endpoints and connectors from model.
                var test = workflowDefinitionData;
                var workflowModel = workflowDefinitionData;
                for (var _i = 0, _a = workflowModel.activities; _i < _a.length; _i++) {
                    var activityModel = _a[_i];
                    // Generate activity HTML element.
                    var activityNode = $("<div class=\"activity\" style=\"left:" + activityModel.x + "px; top:" + activityModel.y + "px;\"></div>");
                    var activityElement = activityNode[0];
                    // Add activity HTML element to the canvas.
                    $(container).append(activityNode);
                    // Make the activity draggable.
                    plumber.draggable(activityElement, { grid: [20, 20] });
                    // Configure the activity as a target.
                    plumber.makeTarget(activityElement, {
                        dropOptions: { hoverClass: "hover" },
                        anchor: "Continuous",
                        endpoint: ["Blank", { radius: 8 }]
                    });
                    // Add source endpoints.
                    var hasMultipleOutcomes = activityModel.outcomes.length > 1;
                    for (var _b = 0, _c = activityModel.outcomes; _b < _c.length; _b++) {
                        var outcome = _c[_b];
                        var sourceEndpointOptions = getSourceEndpointOptions(outcome);
                        var endpoint = plumber.addEndpoint(activityElement, sourceEndpointOptions);
                    }
                    $(activityElement).data("activity-model", activityModel);
                }
                plumber.bind("click", function (conn, originalEvent) {
                    //plumber.deleteConnection(conn);
                });
                plumber.bind("connectionDrag", function (connection) {
                    console.log("connection " + connection.id + " is being dragged. suspendedElement is ", connection.suspendedElement, " of type ", connection.suspendedElementType);
                });
                plumber.bind("connectionDragStop", function (connection) {
                    console.log("connection " + connection.id + " was dragged");
                });
                plumber.bind("connectionMoved", function (params) {
                    console.log("connection " + params.connection.id + " was moved");
                });
            });
            _this.jsPlumbInstance = plumber;
        });
    }
    return WorkflowEditor;
}());
$.fn.workflowEditor = function () {
    this.each(function (index, element) {
        var $element = $(element);
        var workflowDefinitionData = $element.data("workflow-definition");
        $element.data("workflowEditor", new WorkflowEditor(element, workflowDefinitionData));
    });
    return this;
};
$(document).ready(function () {
    var workflowEditor = $(".workflow-editor-canvas").workflowEditor().data("workflowEditor");
    $("#workflowEditorForm").on("submit", function (s, e) {
        var state = workflowEditor.serialize();
        $("#workflowStateInput").val(state);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
